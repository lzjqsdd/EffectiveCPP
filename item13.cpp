//通过引用捕获异常
//通过指针捕获异常不会因为拷贝对象导致的效率下降，但是带来的问题是：
//抛出的指针不能指向一个局部对象。程序员应该在全局或者堆上定义这样一个
//变量才能保证不会因为scope结束而被销毁。但有带来了新的问题，捕获该异常
//的用户并不知道该指针是来自于堆上的变量还是全局的，是否应该delete。如果
//不是堆上建立的异常对象，则delete会不可预测


//总结：
//(1)值捕获一方面每次抛出发生两次拷贝，另外可能出现派生类到基类的截断现象
//(2)指针捕获无法确定是否释放异常对象
//(3)通过引用捕获是最靠谱的。